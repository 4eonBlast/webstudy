프로그래밍 언어...

1. low level 
    - 기계가 직접 알아들을 수 있는 언어. 0,1로 표현되는 기계어
    Assembly language
    개발이 어렵고 유지보수 또한 어렵다.

2. High level
    - 사람이 좀더 이해하기 쉬운 문법으로 프로그래밍
    작성된 소스코드를 번역하는 과정이 필요하다. -> 컴파일

    그렇다면 웹 프로그래밍에 적합한 언어는 무엇일까?
    Python
    PHP
    Javascript
    Java
    Ruby


웹의 동작

인터넷 != WWW
물리적인하나의 컴퓨터에는 여러개의 서버가 동작할수 있고, 각각의 서버는 포트라는 값으로 동작.
인터넷 = 네트워크들의 네트워크(네트워크들의 결합체) -> TCP/IP로 약속

HTTP(Hypertext Transfer Protocol) = 서버와 클라이언트가 인터넷상에서 데이터를 주고 받기 위한 프로토콜
어떤 종류의 데이터든 전송할 수 있다.(이미지, 동영상, 텍스트 등등)

    작동 방식?
        서버/클라이언트 모델
    클라이언트가 서버에 요청을 보내면 서버는 클라이언트에 응답. 요청-응답
    장: 불특정 다수를 대상으로 하는 서비스에 적합. 
    단: 연결이 끊어져서 클라이언트의 이전 상황을 알 수 없다. ->정보를 유지하기 위한 Cookie 필요

    반드시 클라이언트가 먼저 서버에 접속/요청
    요청데이터-> 정해진 규칙이 있음 Header/Body
    GET : 정보를 요청 (SELECT)
    POST : 정보를 넣기 위해서 사용 (INSERT)
    PUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)
    DELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)
    HEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.
    OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.
    TRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.


URL(Uniform Resource Locator)
    웹상에서 문서와 자원들의 위치를 나타내기 위해 사용

    접근 프로토콜//IP주소혹은 도메인 이름/문서경로/이름
    http://www.~~~.co.kr/문서경로/이름
    IP주소 : 집주소
    포트 : 집 안에 있는 방


프론트엔드?
    사용자에게 웹을 통해 다양한 콘텐츠 제공(문서,동영상,사진)
    사용자의 요청에 반응해서 동작
    --이런것들을 잘 처리할 수 있어야--
    그렇다면?
        웹 콘텐츠를 잘보여주기 위해 구조를 만들어야함
        적절한 배치와 일관된 디자인 등을 제공해야함
        사용자 요청을잘 반영해야 함 

HTML
CSS
JavaScript 

백엔드?
    서버의 입장에서 개발이 진행 (server side)
    클라이언트가 제시한 문제를 해결할 수 있어야.
    프로그래밍 언어(JAVA,Python,PHP,JavaScript)/웹의 동작 원리/알고리즘/운영체제(LINUX)/네트워크/프레임워크/DBMS 이해 필수


브라우저의 동작
    browser 의 구성?
        UI 
        |
    Browser engine
        |
    Rendering engine
    |       |       \
    net     JS       UI Backend
   working  Interpreter

이런식으로 웹을 그린다.

HTML - HTML Parser - DOM Tree        Layout
                        |               |
                    Attatchment -> Render Tree -> Painting -> Display
                        |
CSS - CSS Parser - Style rules

DOM - Document object model
HTML 트리구조를 만들어서 브라우저가 처리하도록 한다. p태그 안에 div 안에 뭐 image..

2nd.

브라우저에서의 웹 개발
    브라우저? 사파리/크롬/익스플로러 등등 -> 여기서 웹개발을 위한 코드들이 어떻게 될까?
    HTML코드 안에 자바스크립트,css가 섞여서 존재
    <tag>~~~~</tag> 
    head에는 문서 구성을 위한 정보들이 담긴다.
    body는 구성
    HTML은 계층적

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset = "utf-8">
            <meta name = "viewport" content="width=device-width">
            <title>~~~</title>
            <style>--------- css 정보를 넣는 ---------</style>
        <body>
            ---------내용을 채우는 부분------------    
        </body>
        <script>
            ---------자바스크립트 코드---------
            해석하는 시간이 걸리기 떄문에 아랫쪽에 넣는것이 일반적(body 아랫부분)
            자바스크립트 코드가 브라우저의 렌더링보다 먼저실행됨. -> 이런것을 최소화하기 위해 
            body태그가 닫히기 직전이나 닫힌 이후에 존재하는것이 적절.
        </script>
    </html>

    css나 js코드가 많아지면 외부코드로 태그를 이용해서 넣는다.

    브라우저는 어떻게 해석? -> 힌 라인씩 html을 해석. 
    스크립트 코드가 외부에 정의?-> 서버에 요청. 

웹서버란?
    소프트웨어 소프트웨어가 동작하는 컴퓨터
    클라이언트가 요청하는 html 문서나 각종 리소스를 전달하는 것
    웹 브라우저나 크롤러가 요청하는 리소스 = 컴퓨터에 저장된 정적/동적 데이터
        정적 : html/이미지/css/js 파일
        동적 : 웹서버에서 실행되서 만들어진 프로그램을 이용해 만들어진 결과물.

        웹      ---- (1) 웹페이지 요청--->   웹
      브라우저    <--- (2) 웹페이지 응답----  서버

    웹 브라우저가 접속 - 기본으로 보여지는 html 문서요청
    서버는 html문서를 웹 브라우저로 전달
    브라우저는 전송받은 htm문서를 읽고 해석. css,js,이미지 등등의 리소스를 추출하고 웹 서버에 요청
    웹 서버는 요청을 받고, 결과를 브라우저로 전송.
    브라우저는 읽어들인 여러개의 문서를 합쳐서 화면에 보여주는. ====> '렌더링'

웹 서버는 뭘 사용? 아파치,nginx, 마이크로소프트,구글 등등   
    아파치-> 오픈소스
    nginx-> 차세대 웹서버 더 적은 자원으로 더 빠르게 데이터를 서비스 (오픈소스)


WAS란? (Web Application Server)

    클라이언트/서버 구조
    클라이언트 - 서비스를 제공하는 서버에게 정보를 요청하여 응답 받은결과를 사용.
    서버- 서버
    브라우저 - 클라이언트

    DBMS? 데이터베이스를 관리하는 시스템. 
        데이터를 쉽게 관리할 수 있게 된. 
        DBMS는 보통 서버형태로 서비스를 제공하기 떄문에 DBMS에 접속해서 동작하는 클라이언트 프로그램이 많았었다.
        -> 클라이언트 프로그램의 로직이 많아지고, 크기가 커진다 -> 클라이언트 유지보수/보안이 나쁘다.

    단점을 보완해서 '미들웨어' 등장.
        클라이언트와 DBMS 사이에 또 다른 서버를 두는 방식.
        미들웨어에서 대부분의 로직을 실행. -> 클라이언트는 복잡한 로직이 사라지고, 사용자에게 입력만받고 미들웨어에서 수행(크기가 작아짐)

WAS -> 일종의 미들웨어. 웹 클라이언트의 요청중 보통 웹 애플리케이션이 동작하도록 지원하는 목적을 가짐.
    
    중요한 기본 기능    프로그램 실행 환경/db접속 기능을 제공
                    여러개의 트랜잭션 관리
                    업무 처리하는 비지니스 로직을 수행
    
    톰캣이라는 WAS 하나만 이용 -> WAS 자체로도 웹서버의 기능을 충분히 수행.

    웹서버는 보통 정적인 콘텐츠를 웹 브라우저에게 전송하는 역할
    WAS는 프로그램의 동적인 결과를 웹 브라우저에게 전송하는 역할을 담당

    WAS가 제공하는 웹 서버의 기능이 웹서버랑 비슷한데 웹서버는 없어도 되나?
        초창기에는 웹 애플리케이션을 실행할 때 Apache와 톰캣을 같이 설치해서 실행을 했어야 됬는데
        발전하면서 웹 서버의 역할을 충분히 수행. 
    하지만 웹서버는 WAS보다 간단하게 만들어져 있음. WAS가 문제가 생길 때 -> 무중단으로 운영하기 위해서 웹서버가 WAS 앞단에서 동작하도록.
